{"name":"Php-forms","body":"# PHP-Forms Documentation v0.1.4.1\r\nThis PHP class has been developed to make form generation easier for you. It also looks a hell of a lot tidier and allows you to combine simple forms and complex designs.\r\n\r\n## How do I use it?\r\nDownload the source for this repository, put it into a directory within your site. And because its a static class it's very easy to use. First include the file like so:\r\n\r\n### Example:\r\nHere is an example of how to use the form class. This example is that of a comments form.\r\n\r\n```php\r\n<?php\r\n    //  We need the file, so include it.\r\n    include 'form.php';\r\n    \r\n    //  Store the form options in an array. \r\n    $opts = array('name' => 'form1', 'action' => '', 'method' => 'POST', 'id' => 'comment');\r\n \r\n    Form::start($opts);\r\n        Form::input(array('name' => 'name', 'placeholder' => 'Enter your name here'));\r\n        Form::textarea(array('name' => 'comment', 'value' => 'Enter your message here'));\r\n        Form::submit();\r\n    Form::end();\r\n?>\r\n```\r\n\r\nThe above example should output HTML like so:\r\n\r\n```html\r\n<!-- START OF FORM1 FORM --><form name=\"form1\" action=\"\" method=\"POST\" id=\"comment\" ><input name=\"name\" placeholder=\"Enter your name here\" ><textarea name=\"comment\" value=\"Enter your message here\" >Enter your message here</textarea><input value=\"submit\" type=\"submit\" ></form><!-- END OF FORM -->\r\n```\r\n\r\n## Methods:\r\nNow here is a little bit of detail about each feature in this class, how to implement the methods, the parameters they take and what they output.\r\n\r\nThis class has been developed to try and give you complete freedom over how you want to generate your html forms. But It also provides you with some simple pre-generated forms, such as an upload form or a login form.\r\n\r\n\r\n## start()\r\n\r\n### Implementation\r\n```php\r\n<?php\r\n    Form::start();\r\n?>\r\n```\r\n\r\nIt's that easy. Because this class is so clever, if you don't enter any parameters it will provide you with default settings. This allows you to create html forms on the fly.\r\n\r\n### Parameters\r\n\r\n#### Options\r\nThis parameter is the only parameter for this method. It  is where you define your options for the form. E.g. its name, its action and its method. This parameter takes an array only. It requires a named key and a value. \r\n\r\nImagine that you are writing you html, and you want to set the name of an element, you'd type:\r\n\r\n```html\r\n<form name=\"formname\">\r\n```\r\n\r\nWell this parameter works in a similar way:\r\n\r\n```php\r\n<?php\r\n    Form::start(array('name' => 'formname'));\r\n?>\r\n```\r\n\r\nAnd there you go! It works the same way for things like method, action etc... Most methods throughout this class take a similar parameter; an array where you define your html element properties. \r\n\r\n\r\n## End()\r\n\r\n### Implementation \r\nThis method is used to close the form. It basically adds ``</form>`` to the page.\r\n\r\n```php\r\n<?php\r\n    Form::start();\r\n    //  Other stuff goes here\r\n    Form::end();\r\n?>\r\n```\r\n\r\n### Parameters\r\nThis method does not take any parameters. I included it purely to make it tidier and more consistent when wanting to end the html form.\r\n\r\n\r\n## Dropdown()\r\n\r\n### Implementation\r\nThis method is available to make generating drop-down lists easier for you. This was one of the main reasons I made this class.\r\n\r\n```php\r\n<?\r\n    Form::dropdown(array('car' =>  'ferrari', 'plane' => 'boeing 747'), array('name' => 'vehiclelist', 'class' => 'dropdown'));\r\n?>\r\n```\r\n\r\n### Parameters\r\nThere are two parameters for this method, both being arrays. The first parameter is the list of items that you would like to be displayed and the values that they carry.\r\n\r\n#### Items\r\n```php\r\n<?php\r\n    array('what_is_displayed' => 'value_of_item');\r\n?>\r\n```\r\n\r\n#### Options\r\nThe second parameter is the options parameter, this acts the same as the options parameter for the ``start()`` method. Please see ``start()`` method.\r\n\r\n\r\n## Textarea()\r\nThis method was introduced to make implementing textareas with the form class easier.\r\n\r\n### Implementation\r\n```php\r\n<?php\r\n    Form::textarea(array('name' => 'my_textarea', 'class' => 'textarea1'), 'This will be inside the textarea when it is generated.');\r\n?>\r\n```\r\n\r\n### Parameters\r\nJust like most of the methods in this class it takes an array of options. The other parameter is just a string, this is what will be shown inside the textarea when it is generated.\r\n\r\n\r\n## Input()\r\nThis is just a standard input field where you can determine the type. By default (no parameters) it is a text field.\r\n\r\n### Implementation\r\n```php\r\n<?php\r\n    Form::input(array('name' => 'first_name', 'placeholder' => 'Type your first name here.'));\r\n?>\r\n```\r\n\r\n### Parameters\r\nThis takes the same parameter as ``start()``; an array of options.\r\n\r\n\r\n## Submit()\r\nThis method generates a submit button to finish off your form.\r\n\r\n### Implementation\r\n```php\r\n<?php\r\n    Form::submit(array('name' => 'my_submit_button'));\r\n?>\r\n```\r\n\r\n### Parameters\r\nThis can take an array of options (again). If you do not pass through any parameters the button will use default values.\r\n\r\n\r\n## Password()\r\n\r\n### Implementation\r\n```php\r\n<?php\r\n    Form::password();\r\n?>\r\n```\r\n\r\n### Parameters \r\nThis can take an array of options, but it is not necessary because the default values are probably sufficient.\r\n\r\n\r\n## Login()\r\nThis method is one of the special ones that I decided to include, it makes creating login forms easier, well one line. As of now this method is not easily customisable and uses the old style of parameters. \r\n\r\n### Implementation\r\n```php\r\n<?php\r\n    Form::login($name = 'login', $action = 'page2.php', $id = 'login-form', $class = 'login-form', $line-breaks = true);\r\n?>\r\n``` \r\n\r\n### Parameters\r\n\r\n#### Name\r\nThis parameter is the name of your login form. The default value is login.\r\n\r\n#### Action\r\nThis parameter is the action of the form. This is where you are sending the POST data to. \r\n\r\n#### Id\r\nThis is the id of the form. Used for CSS.\r\n\r\n#### Class\r\nThis is the class of the form. Used for CSS.\r\n\r\n#### Breaks\r\nIf this parameter is false there will be no line breaks between the inputs. If true then there will. The default value of this parameter is false.\r\n\r\n\r\n##  GetForms()\r\nThis method returns all of the forms that you have on the page where you use this method.\r\n\r\n### Implementation\r\n```php\r\n<?php\r\n    Form::getForms();\r\n?>\r\n```\r\n\r\n### Parameters\r\nThis method does not take any parameters.\r\n\r\n\r\n## Upload()\r\nThis method generates an upload form and handles the movement of the file for you. If the action is empty it will move the temporary file to the location that you specify, else you will be required to place the ``recieveFile()`` method on the receiving page. \r\n\r\n### Implementation\r\n```php\r\n<?php\r\n   Form::upload('image_upload', '/uploads/images/', array('image/jpeg', 'image/png', 'image/gif', 'image/jpg'), '');\r\n?>\r\n```\r\n\r\n### Parameters\r\n\r\n#### Name\r\nThis is the name of your upload form.\r\n\r\n#### Where\r\nThis is where the file will be uploaded.\r\n\r\n#### Allows\r\nThis is an array of file types that are allowed.\r\n\r\n#### Action\r\nThis is the action of the form, if this is empty the upload logic will run on the same page as the form. If the action is not empty you will need to use the ``receiveFile()`` method on the same page as you specified in the action, or the page where you wish to handle the upload. This is handy If you wish to implement some form of captcha system when uploading files.\r\n\r\n\r\n## ReceiveFile()\r\n\r\n### Implementation\r\n```php\r\n<?php\r\n   Form::receiveFile();\r\n?>\r\n```\r\n\r\n### Parameters\r\nThis method does not take any parameters.\r\n\r\n\r\n### Authors and Contributors\r\nDeveloped by @Bertdasquirt because he felt the need to make something to put on github. I also thought that this was something that would be pretty useful to people who wanted to be able to easily manage their HTML forms with PHP.\r\n\r\nMore features to come in the future and of course upon request.\r\n\r\n### Support or Contact\r\nIf you are having any problems feel free to contact me: @_craigchilds (Twitter) or place an issue on the repository.","tagline":"A Simple php form class.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}